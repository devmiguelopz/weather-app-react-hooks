rafcp => 
r => react
af => arrow function
c => component
p => with prototypes


ptsr (proptye required )
--------------------------------------------------------

material ui - show text => typography

//CSF component story format  

Test:testing
name.test.jsx

// create react app , default @testing-library/react 


// write test with AAA

 - ARRANGE
 - EXECUTE
 - ASSERT



 //TDD
 1.- ESCRIBIR LA PRUEBA QUE FALLE
 2.- PASA SATISFACTORIAMENTE
 3.- REFACTORIZA CODIGO

 // los requisitos son establecidos por pruebas

 //ciclo
 1.-requisito
 2.-Escribimos una pruebas
 3.- verificamos que la prueba falla
 4.- escribimos la implementacion, escribimos el codigo de la forma mas sencilla, utilizar kizz
 5.- refactorizar code y tieene que pasar todo



//provedores de contexto: el contexto lo provee una cracateristica que o hace diferente
// muy facil s puede altera la informacion de un componente

-----------------------------------------------HOOKS--------------------------------
useHistory hook de react router (historial manejador) meneja la url del nevegador y permite cambiarla



https://api.openweathermap.org/data/2.5/weather?q=Trujillo&appid=0c2939809d551fcfa1712a7d04117e14

//llamda por get in powershell
Invoke-RestMethod -Uri https://api.openweathermap.org/data/2.5/weather?q=Trujillo&appid=0c2939809d551fcfa1712a7d04117e14


variables de entorno en react-app
https://create-react-app.dev/docs/adding-custom-environment-variables/
https://www.youtube.com/watch?v=TFIt9o6BWqA




tranform es como si fuera el control maneja toda la logigca dela transformacion de la data para componente



